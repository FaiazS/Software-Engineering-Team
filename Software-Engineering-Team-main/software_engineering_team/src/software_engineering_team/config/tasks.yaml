software_design_task:
  description: >
       Take the high level software requirements described here and prepare a modular, scalable software design using microservices principles.
       
       The design should strictly follow **SOLID Principles** and apply **industry-standard design patterns** like  Singleton, Builder, Adaptor, Factory, Observer, Strategy and Flyweight
       wherever best suited and fits the current use case.

       Clearly separate concerns into distinct classes or services, each responsible for a single task.

       Output the design in a **markdown format** with detailed breakdown and explanations of the classes and functions across modules.

       Each functional requirement should be exclusively mapped to a class or a microservice enabling ease of extensibility.

       Here are the software requirements: {user_requirements}

  expected_output: >
          A structured software design document in markdown, clearly outlining the microservices based modules, the corresponding classes and its methods, their roles, and how they interact with each other.
      
  agent: engineering_lead

  output_file: output/software_design.md


backend_code_task:
  description: >
      Implement the backend logic according to the software design produced by the engineering lead.

      You have the complete autonomy to choose whichever tech stack, libraries and frameworks(e.g, REST, Django, SpringBoot, FastAPI, Flask etc.) based on the given software design and

      scale of the requirements.

      However, begin your work by:

       - Mentioning the chosen language and framework and the reasoning behind the chosen tech stack

      Ensure thoroughly that your implementation follows **SOLID Design Principles**, is modular,and utilizes the appropriate **Design Pattern** wherever applicable.

      Each service and component should be encapsulated within its own corresponding class or module. Ensure clear separation of concerns between business logic layers, data access layers, and communication layers(API Communication)

      Here are the software requirements: {user_requirements}

      Your implementation should follow all the above principles carefully.
    
      Use the `FileWriterTool` to save each file in the appropriate directory.

  expected_output: >
        A complete backend implementation of the software design using the most appropriate language and framework suited to the software design and the requirements.

        Include:

          - The source code(in raw format only, NO MARKDOWN FORMATTING and code fences)

          - The language or frameworks used

          - The installation steps(plain english)

          - Configuration and environment variables to run(if any)

        The output should be executable, production grade, and follow best practices like modularization, logging, error-handling, and security.

        The final output should be well organized in a folder structure that reflects separation of services and modules, enabling easy access and navigation, and also ensures as minimal overhead as possible while integration into larger systems if required.

  agent: backend_engineer

  context:
     - software_design_task

  output_dir: output/backend_module


frontend_code_task:
  description: >
       Implement a fully functional and interactive frontend UI that seamlessly interacts with the backend logic based on the provided software requirements and the implementation of the backend(output/backend_module)

       You have the full autonomy of choosing any frontend tech stack you want(e.g Gradio, Streamlit, React, Angular, Vue, Flutter etc.)

       However, begin your work by:

       - The chosen language and framework and the reasoning behind the chosen tech stack

       - Any assumptions you are making about backend routes or structure

       Your implementation should ensure that the UI's intuitive, minimal and effectively demonstrates the core functionalities as described in the software requirements.

       Your implementation should follow all the above principles carefully.
    
       Use the `FileWriterTool` to save each file in the appropriate directory.

  expected_output: >
        - The complete raw source code of the frontend(no markdown formatting or code delimiters)
        
        - Clear statement of the framework used and why it was chosen

        - Instructions to run the UI locally(e.g install commands, run commands)

        - Assumptions made during implementation

        - Clean, well-structured, and modular code.

        The final output should be well organized in a folder structure that reflects separation of services and modules, enabling         easy access and navigation, and also ensures as minimal overhead as possible while integration into larger systems if required.

  agent: frontend_engineer

  context: 
   - backend_code_task

  output_dir: output/frontend_module


qa_task:
  description: >
    Design and implement thorough test coverage for the backend implementation found in output/backend_module.

    You have the full autonomy to choose the framework best suiting the technology which was used for the backend(e.g PyTest, JUnit, Jest etc.) based on the tech stack inferred from the backend implementation.

    Your responsibilities include but not limited to:

      -  Writing unit tests for all the major classes, functions and logic flows.

      -  Writing integration tests wherever necessary and relevant to check the correctness and consistency of interactions between services/modules.

      - Ensure that no edge case is being missed out and all edge cases are handled(e.g boundary inputs, invalid data, failure scenarios)

      - Implementing appropriate mocks/stubs wherever needed.

      - Following best practices for **logging**, **assertions** and **test isolation**

      - Ensuring tests are **repeatable**, **independent** and **automated**

    Also, you should:

      - Perform basic **security testing** wherever required and feasible(input validation, fuzzing, authentication and authorization flows etc.)

      - Highlight any test coverage limitations and justify trade-offs.

    Your implementation should follow all the above principles carefully.
    
    Use the `FileWriterTool` to save each file in the appropriate directory.
     
  expected_output: >
      - The complete raw source code of the test suite(no markdown formatting and code delimiters)

      - A brief explanation of the testing framework used and the reasoning behind choosing the same

      - Instructions on how to run the tests locally(or exact commands)

      - All test files should be clearly structured and the file naming for each test file should be straight-forward and self-explanatory reflecting what each test file contains
      
      The final output should be well organized in a folder structure that reflects separation of services and modules, enabling easy access and navigation, and also ensures as minimal overhead as possible while integration into larger systems if required.

  agent: test_engineer

  context:
   - backend_code_task

  output_dir: output/tests_module